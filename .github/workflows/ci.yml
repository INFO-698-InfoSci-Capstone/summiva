name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pypoetry
          ~/.cache/pip
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-
    
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
    
    - name: Install dependencies
      run: |
        cd src/backend
        poetry install --no-interaction
    
    - name: Run tests
      run: |
        cd src/backend
        poetry run pytest --cov=app --cov-report=xml
    
    - name: Run security scan
      run: |
        cd src/backend
        poetry run bandit -r . --severity-level high --confidence-level high
    
    - name: Deploy to staging
      if: github.ref == 'refs/heads/main'
      run: |
        cd src/backend
        poetry run python deploy.py --env staging

  frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.19.0'
        cache: true
    
    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.pub-cache
          **/build
        key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-flutter-
    
    - name: Install dependencies
      run: |
        cd src/frontend
        flutter pub get
    
    - name: Run tests
      run: |
        cd src/frontend
        flutter test
    
    - name: Build web
      run: |
        cd src/frontend
        flutter build web --release
    
    - name: Deploy to staging
      if: github.ref == 'refs/heads/main'
      run: |
        cd src/frontend
        flutter deploy --env staging

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: summiva_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
    
    - name: Install dependencies
      run: |
        cd src/backend
        poetry install --no-interaction
    
    - name: Run linters
      run: |
        cd src/backend
        poetry run black . --check
        poetry run isort . --check
        poetry run flake8 .
        poetry run mypy .
    
    - name: Run tests
      run: |
        cd src/backend
        poetry run pytest --cov=app --cov-report=xml
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db
        DB_USER: postgres
        DB_PASSWORD: postgres
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        MONGODB_HOST: localhost
        MONGODB_PORT: 27017
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./src/backend/coverage.xml

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Backend
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          summiva/backend:latest
          summiva/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./src/frontend
        push: true
        tags: |
          summiva/frontend:latest
          summiva/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Update kube config
      run: aws eks update-kubeconfig --name summiva-cluster
    
    - name: Deploy to EKS
      run: |
        cd infra/kubernetes
        kubectl apply -f namespace.yaml
        kubectl apply -f secrets.yaml
        kubectl apply -f configmap.yaml
        kubectl apply -f backend-deployment.yaml
        kubectl apply -f frontend-deployment.yaml
        kubectl apply -f ingress.yaml 