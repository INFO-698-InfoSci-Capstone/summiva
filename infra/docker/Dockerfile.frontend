 # Stage 1: Build Flutter web app
FROM cirrusci/flutter:3.13.9 AS build

WORKDIR /app
COPY . .

RUN flutter channel stable
RUN flutter upgrade
RUN flutter pub get
RUN flutter build web --release

# Stage 2: Serve via Nginx
FROM nginx:alpine

# Remove default config
RUN rm /etc/nginx/conf.d/default.conf

# Copy custom nginx config
COPY nginx.conf /etc/nginx/conf.d/

# Copy built Flutter web app
COPY --from=build /app/build/web /usr/share/nginx/html

# Expose web port
EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
    
##    The frontend Dockerfile is a bit different from the backend one. The frontend Dockerfile uses a multi-stage build to build the Flutter web app and serve it via Nginx. 
##    The first stage uses the  cirrusci/flutter:3.13.9  image to build the Flutter web app. The second stage uses the  nginx:alpine  image to serve the built Flutter web app. 
##    The first stage sets up the Flutter environment, copies the source code, and builds the Flutter web app. The second stage removes the default Nginx config, copies the custom Nginx config, and copies the built Flutter web app. 
##    The frontend Dockerfile is a bit more complex than the backend one, but it’s still straightforward. 
##    Step 3: Create a Docker Compose file 
##    The Docker Compose file is used to define and run multi-container Docker applications. It’s a YAML file that defines services, networks, and volumes. 
##    Here’s the Docker Compose file for the full-stack app:
